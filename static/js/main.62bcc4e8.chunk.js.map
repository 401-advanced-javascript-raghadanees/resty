{"version":3,"sources":["component/form/form.js","component/footer/footer.js","component/header/header.js","component/results/results.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handelInput","event","url","target","value","console","log","setState","handleMethod","e","method","handleClick","handelUpdate","state","results","id","type","placeholder","onChange","this","onClick","name","defaultChecked","htmlFor","React","Component","Footer","Header","Results","className","JSON","stringify","headers","count","App","a","fetch","raw","json","data","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2UAiEeA,G,8DA5Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IASRC,YAAc,SAACC,GACb,IAAIC,EAAMD,EAAME,OAAOC,MACvBC,QAAQC,IAAI,2BAA2BL,EAAME,OAAOC,OACpD,EAAKG,SAAS,CAAEL,SAbC,EAiBnBM,aAAe,SAACC,GACd,IAAIC,EAASD,EAAEN,OAAOC,MACtBC,QAAQC,IAAI,qBAAqBI,EAAOD,EAAEN,OAAOC,OACjD,EAAKG,SAAS,CAAEG,YApBC,EAwBnBC,YAAc,WACZ,EAAKZ,MAAMa,aAAa,EAAKC,MAAMX,KACnC,EAAKK,SAAS,CAAEL,IAAK,MAvBrB,EAAKW,MAAQ,CACXX,IAAK,GACLQ,OAAO,GACPI,QAAQ,IANO,E,qDA+BjB,OACE,8BACE,yBAAKC,GAAG,YACN,oCACA,2BAAOC,KAAK,OAAOC,YAAY,oCAAoCC,SAAUC,KAAKnB,cAClF,4BAAQoB,QAASD,KAAKR,aAAtB,SAEF,0BAAMI,GAAG,QACP,2BAAOK,QAASD,KAAKX,aAAcQ,KAAK,QAAQD,GAAG,MAAMM,KAAK,SAASjB,MAAM,MAAMkB,gBAAc,IACjG,2BAAOC,QAAQ,OAAf,OAEA,2BAAOH,QAASD,KAAKX,aAAcQ,KAAK,QAAQD,GAAG,OAAOM,KAAK,SAASjB,MAAM,SAC9E,2BAAOmB,QAAQ,QAAf,QAEA,2BAAOH,QAASD,KAAKX,aAAcQ,KAAK,QAAQD,GAAG,MAAMM,KAAK,SAASjB,MAAM,QAC7E,2BAAOmB,QAAQ,OAAf,OAEA,2BAAOH,QAASD,KAAKX,aAAcQ,KAAK,QAAQD,GAAG,SAASM,KAAK,SAASjB,MAAM,WAChF,2BAAOmB,QAAQ,UAAf,gB,GAlDSC,IAAMC,YCQVC,G,6KAHX,OAAS,mD,GAHQF,IAAMC,YCIZE,G,MAPA,WACb,OACE,gCACE,wCCSSC,MAXf,SAAiB7B,GACf,OAEE,yBAAK8B,UAAU,WACZC,KAAKC,UAAW,CAACC,QAASjC,EAAMiC,QAASC,MAAOlC,EAAMkC,MAAQnB,QAASf,EAAMe,SAAW,KAAK,KC+BrFoB,E,kDA5Bb,WAAYnC,GAAO,IAAD,8BAChB,cAAMA,IASRa,aAVkB,uCAUH,WAAOV,GAAP,iBAAAiC,EAAA,6DACb9B,QAAQC,IAAI,mBAAoBJ,GADnB,SAEGkC,MAAMlC,GAFT,cAETmC,EAFS,gBAGIA,EAAIC,OAHR,OAGTC,EAHS,OAIb,EAAKhC,SAAS,CAACyB,QAASK,EAAIL,QAASlB,QAASyB,EAAKzB,QAASmB,MAAOM,EAAKN,QAJ3D,2CAVG,sDAEhB,EAAKpB,MAAQ,CACXoB,MAAM,EACNnB,QAAS,GACTkB,QAAS,IALK,E,qDAkBhB,OACE,kBAAC,IAAMQ,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAM5B,aAAcO,KAAKP,eACzB,kBAAC,EAAD,CAASoB,QAASb,KAAKN,MAAMmB,QAASC,MAAOd,KAAKN,MAAMoB,MAAOnB,QAASK,KAAKN,MAAMC,UACnF,kBAAC,EAAD,W,GAxBUU,IAAMC,WCEJgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrD,QAAQqD,MAAMA,EAAMC,c","file":"static/js/main.62bcc4e8.chunk.js","sourcesContent":["import React from 'react';\nimport './main.scss';\n\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { \n      url: '',\n      method:'',\n      results:[],\n    };\n  }\n\n  handelInput = (event) => {\n    let url = event.target.value;\n    console.log('event.target.value > url',event.target.value);\n    this.setState({ url }); //rerender\n  }\n\n\n  handleMethod = (e)=>{\n    let method = e.target.value;\n    console.log('method from select',method,e.target.value);\n    this.setState({ method });\n  }\n\n\n  handleClick = () =>{\n    this.props.handelUpdate(this.state.url);\n    this.setState({ url: '' });\n\n  }\n  \n  render() {\n    return (\n      <main>\n        <div id=\"inputDiv\" >\n          <p>URL: </p>\n          <input type=\"text\" placeholder='https://localhost:3000/categories' onChange={this.handelInput} />\n          <button onClick={this.handleClick}>Go !</button>\n        </div>\n        <form id='form'>\n          <input onClick={this.handleMethod} type=\"radio\" id=\"get\" name=\"method\" value=\"get\" defaultChecked/>\n          <label htmlFor=\"get\">GET</label>\n\n          <input onClick={this.handleMethod} type=\"radio\" id=\"post\" name=\"method\" value=\"post\"/>\n          <label htmlFor=\"post\">POST</label>\n\n          <input onClick={this.handleMethod} type=\"radio\" id=\"put\" name=\"method\" value=\"put\"/>\n          <label htmlFor=\"put\">PUT</label>\n\n          <input onClick={this.handleMethod} type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\"/>\n          <label htmlFor=\"delete\">DELETE</label>\n        </form>\n\n        {/* <div id=\"result\">\n          {this.state.results}\n        </div> */}\n      </main>\n    );\n  }\n}\n\nexport default Form;","\nimport React from 'react';\nimport './footer.scss';\n\n// const Footer = ()=>{  <footer> &copy; 2020 401d4 </footer> }\n\nclass Footer extends React.Component {\n\n  render() { \n    return ( <footer>&copy; 2020  </footer> );\n  }\n}\nexport default Footer;","import React from 'react';\nimport './header.scss';\n\nconst Header = () => {\n  return (\n    <header>\n      <h1>RESTy</h1>\n    </header>\n  );\n};\nexport default Header;","import React from 'react';\n\n\n\nfunction Results(props) {\n  return (\n    \n    <pre className=\"results\">\n      {JSON.stringify( {headers: props.headers, count: props.count,  results: props.results }, null,5  )}\n    </pre>\n   \n  );\n}\n\n\nexport default Results;","\n/* eslint-disable no-undef */\nimport React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Form from './component/form/form';\nimport Footer from './component/footer/footer';\nimport Header from './component/header/header.js';\nimport Results from './component/results/results.js';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      count:0,\n      results: [],\n      headers: [],\n    };\n  }\n\n  // url.......  https://swapi.dev/api/people/\n  handelUpdate = async (url)=> {\n    console.log('url from app.js ', url);\n    let raw = await fetch(url);\n    let data = await raw.json();\n    this.setState({headers: raw.headers, results: data.results, count: data.count });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <Form handelUpdate={this.handelUpdate}/>\n        <Results headers={this.state.headers} count={this.state.count} results={this.state.results} />\n        <Footer />\n      </React.Fragment>\n    );\n  }\n}\nexport default App;\n\n\n// const Header = () => {\n//   return (\n//     <header>\n//       <h1>RESTy</h1>\n//     </header>\n//   )\n// };\n// const Footer = () => <footer>&copy 2020</footer>\n// //Main\n// var method = 'get'\n// class Main extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { results: '',url: '',method:'' };\n//   }\n//   handelInput = (e) => {\n//     const url = e.target.value;\n//     console.log(e.target.value);\n//     this.setState({ url });\n//   };\n//   handleMethod = (e) =>{\n//     method = e.target.value;\n//    console.log(\"method from select\",method,e.target.value);\n//   //  this.setState({ method });\n//  }\n//   handleClick = (e) => {\n//     const results = this.state.url;\n//     this.setState({ results ,method});\n//   };\n//   render() {\n//     return (\n//       <main className=\"main\">\n//         <div>\n//           <p>URL :</p>\n//         <input type=\"text\" onChange={this.handelInput} />\n//         <button onClick={this.handleClick}>Go</button>\n//         </div>\n//         <form onClick={this.handleMethod}>\n//           <input type=\"radio\" id=\"get\" name=\"method\" value=\"get\" defaultChecked/>\n//           <label htmlFor=\"get\">Get</label>\n//           <input type=\"radio\" id=\"post\" name=\"method\" value=\"post\"/>\n//           <label htmlFor=\"post\">Post</label>\n//           <input type=\"radio\" id=\"put\" name=\"method\" value=\"put\"/>\n//           <label htmlFor=\"put\">Put</label>\n//           <input type=\"radio\" id=\"delete\" name=\"method\" value=\"delete\"/>\n//           <label htmlFor=\"delete\">Delete</label>\n//         </form>\n//         <div id=\"result\">\n//         <p>{this.state.method} {this.state.results}</p>\n//         </div>\n//       </main>\n//     );\n//   }\n// }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}